name: CI

on:
  push:
    # Run on the main branch
    branches:
      - main
    # Releases are tags named 'v<version>', and must have the "major.minor.micro", for example: "0.1.0".
    # Release candidates are tagged as `v<version>-rc<num>`, for example: "0.1.0-rc1".
    tags:
      - "v*"
  # Also on PRs, just be careful not to publish anything
  pull_request:

env:
  VERSION_HELM: "v3.9.2"
  CONTAINER: podman

jobs:

  prepare:
    runs-on: ubuntu-22.04

    outputs:
      do-build: ${{steps.changed-files-irrelevant.outputs.only_modified != 'true' || steps.state.outputs.release == 'true'}}
      do-publish: ${{steps.state.outputs.do-publish}}
      release: ${{steps.state.outputs.release}}
      version: ${{steps.version.outputs.version}}
      prerelease: ${{steps.state.outputs.prerelease}}

    steps:

      - uses: actions/checkout@v3
        with:
          submodules: recursive
          fetch-depth: 0

      # Gather information for build

      - name: Evaluate state
        id: state
        run: |
          test -z "${{github.head_ref}}" && echo '::set-output name=do-publish::true'
          if [[ "${{ github.event.ref }}" =~ ^refs/tags/v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
              echo ::set-output name=release::true
              echo ::set-output name=release::true
          elif [[ "${{ github.event.ref }}" =~ ^refs/tags/v.*$ ]]; then
              echo ::set-output name=release::true
              echo ::set-output name=prerelease::true
          fi

      - name: Set version
        if: ${{github.head_ref == ''}}
        id: version
        run: |
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
          [ "$VERSION" == "main" ] && VERSION=latest
          echo VERSION=$VERSION
          echo "::set-output name=version::$VERSION"
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      # evaluate changed files
      - name: Evaluate non-relevant changed files
        id: changed-files-irrelevant
        uses: tj-actions/changed-files@v23.1
        with:
          files: |
            docs/

  info:
    name: info
    runs-on: ubuntu-22.04
    needs: [prepare]
    steps:
      - run: |
          echo "do-build: ${{needs.prepare.outputs.do-build}}"
          echo "do-publish: ${{needs.prepare.outputs.do-publish}}"
          echo "release: ${{steps.state.outputs.release}}"
          echo "version: ${{steps.version.outputs.version}}"
          echo "prerelease: ${{steps.state.outputs.prerelease}}"

  check:
    runs-on: ubuntu-22.04
    needs: [prepare]
    if: needs.prepare.outputs.do-build == 'true'
    steps:

      - uses: actions/checkout@v3
        with:
          submodules: recursive

      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            .cargo-container-home
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Install dependencies
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo apt update
          sudo apt install -y build-essential curl tzdata libssl-dev pkg-config libsasl2-dev librdkafka-dev libpq-dev libpqxx-dev

      - name: Check format
        run: cargo fmt --all -- --check

      - name: Check
        run: cargo check --release

  test:
    name: test
    runs-on: ubuntu-22.04
    needs: [prepare, check]
    if: needs.prepare.outputs.do-build == 'true'
    steps:

      - uses: actions/checkout@v3
        with:
          submodules: recursive

      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            .cargo-container-home
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Install dependencies
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo apt update
          sudo apt install -y build-essential curl tzdata libssl-dev pkg-config libsasl2-dev librdkafka-dev libpq-dev libpqxx-dev

      - name: Run tests
        env:
          RUST_BACKTRACE: "1"
        run: |
          cargo test --release


  build:
    name: build
    runs-on: ubuntu-22.04
    needs: [prepare, check]
    if: needs.prepare.outputs.do-build == 'true'
    steps:

      - uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Fixup Dockerfile for Podman 3.x
        run: |
          sed -i '/^    --mount/d' Dockerfile
          cat Dockerfile

      - name: Run build
        run: |
          make build-images

      - name: Save images
        run: |
          make save-images

      - name: Upload images
        uses: actions/upload-artifact@v2
        with:
          name: container-images
          path: build/images/all.tar
          if-no-files-found: error


  server-linux:
    runs-on: ubuntu-22.04
    needs: [prepare, check]
    if: needs.prepare.outputs.do-build == 'true'
    env:
      VERSION: ${{needs.prepare.outputs.version}}

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive

      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-server-${{ hashFiles('**/Cargo.lock') }}

      - name: Install dependencies
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo apt update
          sudo apt install -y build-essential curl tzdata libssl-dev pkg-config libsasl2-dev librdkafka-dev libpq-dev libpqxx-dev

      - name: Build binary
        run: |
          PQ_LIB_STATIC=1 SASL2_STATIC=1 OPENSSL_STATIC=1 cargo build --release --features static -p drogue-doppelgaenger-server

      - name: Upload server binary
        uses: actions/upload-artifact@v2
        with:
          name: drogue-doppelgaenger-server-linux-amd64
          path: target/release/drogue-doppelgaenger-server
          if-no-files-found: error


  server-macos:
    runs-on: macos-12
    needs: [prepare, check]
    if: needs.prepare.outputs.do-build == 'true'
    env:
      VERSION: ${{needs.prepare.outputs.version}}
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive

      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-server-${{ hashFiles('**/Cargo.lock') }}

      - name: Build binary
        shell: bash
        run: |
          brew update
          brew install librdkafka openssl

          # Build and install postgresql dep
          curl -fsSL -o postgresql-11.13.tar.gz https://ftp.postgresql.org/pub/source/v11.13/postgresql-11.13.tar.gz
          tar xvf postgresql-11.13.tar.gz
          cd postgresql-11.13
          ./configure --prefix=$PWD/../libpq
          make
          make install
          cd ..
          PQ_LIB_STATIC=1 PQ_LIB_DIR=$PWD/libpq/lib SASL2_STATIC=1 OPENSSL_STATIC=1 OPENSSL_DIR=/usr/local/opt/openssl DEP_OPENSSL_DIR=/usr/local/opt/openssl RUSTFLAGS="-C target-feature=+crt-static" cargo build --release -p drogue-doppelgaenger-server --features static

      - name: Upload server binary
        uses: actions/upload-artifact@v2
        with:
          name: drogue-doppelgaenger-server-macos-amd64
          path: target/release/drogue-doppelgaenger-server
          if-no-files-found: error


  deploy:
    name: deploy on kind
    runs-on: ubuntu-22.04
    needs: [prepare, build]
    if: needs.prepare.outputs.do-build == 'true'
    env:
      CLUSTER: "kind"
      # both podman or docker works, but we must use it consistently, and kind uses docker
      CONTAINER: "docker"

    steps:

      - uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Set up Helm
        uses: azure/setup-helm@v1
        with:
          version: ${{ env.VERSION_HELM }}

      - name: Fetch container images
        uses: actions/download-artifact@v2
        with:
          name: container-images

      - name: Create k8s kind Cluster
        uses: helm/kind-action@v1.3.0
        with:
          wait: 300s
          cluster_name: kind
          config: deploy/kind/cluster-config.yaml
          version: v0.12.0

      - name: Load images
        run: ${CONTAINER} load -i all.tar

      - name: Tag images
        run: |
          make tag-images CONTAINER_REGISTRY=dev.local IMAGE_TAG=${{ github.sha }}

      - name: Load images in kind
        run: make kind-load CONTAINER_REGISTRY=dev.local IMAGE_TAG=${{ github.sha }}

      - name: Delete loaded images
        run: rm all.tar

      - name: List all images in kind
        run: ${CONTAINER} exec -t kind-control-plane crictl images

      - name: Deploy
        env:
          DEBUG: "true"
        run: |
          ./scripts/drgadm deploy \
            -s drogueCloudTwin.defaults.images.repository=dev.local \
            -S drogueCloudTwin.defaults.images.tag=${{ github.sha }} \
            -s drogueCloudTwin.defaults.images.pullPolicy=Never
        timeout-minutes: 30

      - name: Collect logs
        if: failure()
        run: |
          mkdir -p /tmp/logs/kind
          kind export logs /tmp/logs/kind
          mkdir -p /tmp/logs/ns
          for ns in kafka drogue-doppelgaenger; do
            ./.github/scripts/collect_logs.sh /tmp/logs/ns/$ns $ns
          done

      - name: Upload artifacts
        if: failure()
        uses: actions/upload-artifact@v2
        with:
          name: deploy-logs
          path: /tmp/logs
